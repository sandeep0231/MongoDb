-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
#) show dbs :- to show the database
#) use mydatabase :-  command to switch to a specific database or create( if db name is not exist in mongodb.)
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
#) Advantages of MongoDB over RDBMS :- 

Schema less − MongoDB is a document database in which one collection holds different documents. Number of fields, content and size of the document can differ from one document to another.

Structure of a single object is clear.

No complex joins.

Deep query-ability. MongoDB supports dynamic queries on documents using a document-based query language that's nearly as powerful as SQL.

Tuning.

Ease of scale-out − MongoDB is easy to scale.

Conversion/mapping of application objects to database objects not needed.

Uses internal memory for storing the (windowed) working set, enabling faster access of data.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
#)  Why Use MongoDB? :- 
 Document Oriented Storage − Data is stored in the form of JSON style documents.

Index on any attribute

Replication and high availability

Auto-Sharding

Rich queries

Fast in-place updates

Professional support by MongoDB
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
#)   Where to Use MongoDB? :- 
Big Data
Content Management and Delivery
Mobile and Social Infrastructure
User Data Management
Data Hub
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
#)  The dropDatabase() Method :- MongoDB db.dropDatabase() command is used to drop a existing database.
>>>db.dropDatabase()
This will delete the selected database. If you have not selected any database, then it will delete default 'test' database.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
#) The createCollection() Method :- MongoDB db.createCollection(name, options) is used to create collection.
Syntax:-
>>>db.createCollection(name, options)
In the command, name is name of collection to be created. Options is a document and is used to specify configuration of collection.

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
#) The drop() Method :- MongoDB's db.collection.drop() is used to drop a collection from the database.
Syntax :- 
>>>db.COLLECTION_NAME.drop()
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
#) DATATYPE in mongoDB :- MongoDB supports many datatypes. Some of them are −

String − This is the most commonly used datatype to store the data. String in MongoDB must be UTF-8 valid.

Integer − This type is used to store a numerical value. Integer can be 32 bit or 64 bit depending upon your server.

Boolean − This type is used to store a boolean (true/ false) value.

Double − This type is used to store floating point values.

Min/ Max keys − This type is used to compare a value against the lowest and highest BSON elements.

Arrays − This type is used to store arrays or list or multiple values into one key.

Timestamp − ctimestamp. This can be handy for recording when a document has been modified or added.

Object − This datatype is used for embedded documents.

Null − This type is used to store a Null value.

Symbol − This datatype is used identically to a string; however, it's generally reserved for languages that use a specific symbol type.

Date − This datatype is used to store the current date or time in UNIX time format. You can specify your own date time by creating object of Date and passing day, month, year into it.

Object ID − This datatype is used to store the document’s ID.

Binary data − This datatype is used to store binary data.

Code − This datatype is used to store JavaScript code into the document.

Regular expression − This datatype is used to store regular expression.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
#) The insert() Method :- To insert data into MongoDB collection, you need to use MongoDB's insert() or save() method.
Definition: The insert method is used to insert one or more documents into a collection.
Syntax: >>>db.collection.insert(documents)
Usage:
Accepts an array of documents or a single document.
If an array is provided, all documents are inserted in a single operation.
Returns an acknowledgment of the write operation, including the number of documents inserted and their _id values.
Behavior:
If documents with conflicting _id values are inserted, the operation will fail for all conflicting documents.
Allows for bulk insertion of multiple documents efficiently.
EX: -
db.users.insert([
  { name: "Alice", age: 30 },
  { name: "Bob", age: 25 }
]);

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
#) The insertOne() method :-   The insertOne method is used to insert a single document into a collection.
Syntax: - >>>db.collection.insertOne(document)
Usage:
Accepts a single document as an argument.
Inserts exactly one document into the collection.
Returns an acknowledgment of the write operation, including the _id of the inserted document.
Behavior:
If the document already contains an _id field, MongoDB will use that _id. Otherwise, MongoDB will generate a new unique _id.
Useful for inserting individual documents when you only need to insert one document at a time

EX: - db.users.insertOne({ name: "Charlie", age: 35 });

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
#) The insertMany() method :- Definition: The insertMany method is used to insert multiple documents into a collection.
Syntax: -  >>>db.collection.insertMany(documents, options)

Usage:
Accepts an array of documents as an argument.
Inserts multiple documents into the collection in a single operation.
Returns an acknowledgment object with details about the write operation, including the _id values of the inserted documents.

EX :-
db.users.insertMany([
  { name: "Alice", age: 30 },
  { name: "Bob", age: 25 }
]);

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
#) The find() Method :-  To query data from MongoDB collection, you need to use MongoDB's find() method.
>>>db.COLLECTION_NAME.find()
find() method will display all the documents in a non-structured way.
EX :-
// Find all documents where age is greater than 25
const cursor = db.users.find({ age: { $gt: 25 } });

// Iterate over the cursor and print each document
cursor.forEach(doc => {
    console.log(doc);
});

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
#) The findOne() method :-  Apart from the find() method, there is findOne() method, that returns only one document.
>>>db.COLLECTIONNAME.findOne()
Definition: The findOne() method is used to query a single document from a collection that matches the specified criteria.
EX: -
// Find the first document where name is "Alice"
const document = db.users.findOne({ name: "Alice" });
console.log(document);

When to Use Each
Use find() when you need to retrieve multiple documents that match specific criteria.
Use findOne() when you only need to retrieve one document that matches specific criteria or to check if a document exists

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
#) MongoDB Update() Method :- The update() method updates the values in the existing document.

>>>db.COLLECTION_NAME.update(SELECTION_CRITERIA, UPDATED_DATA)

 The updateOne() method updates a single document that matches the specified filter in a collection.
Syntax: db.collection.updateOne(filter, update, options)
Usage:
Accepts a filter object to specify which document(s) to update.
Accepts an update object that defines the modifications to apply to the matched document.
Returns an acknowledgment object with details about the update operation.

Behavior:
Updates only the first document that matches the filter.
If no document matches the filter, no action is taken.
Supports options like upsert to insert a new document if no match is found ({ upsert: true }).

EX :-
// Update the document where name is "Alice"
const result = await db.users.updateOne(
    { name: "Alice" },
    { $set: { age: 31 } }
);
console.log(result.modifiedCount); // Number of documents modified (should be 1)

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
#) updateMany() :- 
Definition: The updateMany() method updates all documents that match the specified filter in a collection.
Syntax: >>>db.collection.updateMany(filter, update, options)
Usage:
Accepts a filter object to specify which document(s) to update.
Accepts an update object that defines the modifications to apply to the matched documents.
Returns an acknowledgment object with details about the update operation.
Behavior:
Updates all documents that match the filter.
If no documents match the filter, no action is taken.
Supports options like upsert to insert new documents if no matches are found ({ upsert: true }).

EX :- 
// Update all documents where age is greater than 30
const result = await db.users.updateMany(
    { age: { $gt: 30 } },
    { $set: { status: "inactive" } }
);
console.log(result.modifiedCount); // Number of documents modified

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
#) MongoDB findOneAndUpdate() method :- In MongoDB, findOneAndUpdate() is a method that atomically finds a document in a collection, updates it, and returns either the original document before modification or the updated document depending on the options specified. This method is particularly useful for scenarios where you need to update a single document and optionally retrieve the document as it was before the update or after the update.

Syntax:
The basic syntax for findOneAndUpdate() in MongoDB is as follows:
>>>db.collection.findOneAndUpdate(filter, update, options)

EX :- 
// Update the document where name is "Alice", and increment her age by 1
const result = await db.users.findOneAndUpdate(
    { name: "Alice" },
    { $inc: { age: 1 } }
);
console.log(result.value); // Updated document


// Find the document where name is "Bob" and update his age or create a new document if not found
const result = await db.users.findOneAndUpdate(
    { name: "Bob" },
    { $set: { age: 35 } },
    { upsert: true, returnOriginal: false }
);
console.log(result.value); // Updated or newly inserted document


-----------------------------------------------------------------------------------------------------------------------------------------------------------------------



-----------------------------------------------------------------------------------------------------------------------------------------------------------------------


-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

         ############################## *********MONGO DB AGGREGATION AND PIPELINE********* ##############################
         ############################## *********MONGO DB AGGREGATION AND PIPELINE********* ##############################
         ############################## *********MONGO DB AGGREGATION AND PIPELINE********* ##############################


-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
#) Here’s a list of common comparison operators you can use in MongoDB queries::---

1) Equality Operators::-
                    $eq: Equal to
                    $ne: Not equal to

2) In/Not In Operators::-
                  $in: In a specified array
                  $nin: Not in a specified array


3) Comparison Operators::-

                  $gt: Greater than
                  $gte: Greater than or equal to
                  $lt: Less than
                  $lte: Less than or equal to


4) Logical Operators::-

                $and: Logical AND
                $or: Logical OR
                $not: Logical NOT
                $nor: Logical NOR

5)Additional Operators::-

                $exists: Checks for the existence of a field
                $type: Checks the BSON type of a field
------------------------------------------------------------------------------------

## EXAMPLE OF USE ALL OPRATORS ::-

// Equal to
db.collection.find({ age: { $eq: 30 } });

// Not equal to
db.collection.find({ age: { $ne: 30 } });

// In
db.collection.find({ status: { $in: ["active", "pending"] } });

// Not in
db.collection.find({ status: { $nin: ["inactive", "suspended"] } });

// Greater than
db.collection.find({ age: { $gt: 30 } });

// Greater than or equal to
db.collection.find({ age: { $gte: 30 } });

// Less than
db.collection.find({ age: { $lt: 30 } });

// Less than or equal to
db.collection.find({ age: { $lte: 30 } });


-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

#) what is $unwind in mongodb ?

The $unwind operator in MongoDB is used to deconstruct an array field from the input documents, creating a separate document for each element of the array. This is particularly useful in aggregation pipelines when you want to work with each element of an array individually.

How $unwind Works
When you apply $unwind to an array field:

Each element of the array generates a new document.
Other fields in the original document are repeated for each new document.
Syntax ::-
{
  $unwind: "$arrayField"
}



Example
Consider a collection named students with the following documents:

{ "_id": 1, "name": "Alice", "scores": [85, 90, 95] }
{ "_id": 2, "name": "Bob", "scores": [80, 85] }
Using $unwind on the scores array:


db.students.aggregate([
  { $unwind: "$scores" }
])



The result will be:
{ "_id": 1, "name": "Alice", "scores": 85 }
{ "_id": 1, "name": "Alice", "scores": 90 }
{ "_id": 1, "name": "Alice", "scores": 95 }
{ "_id": 2, "name": "Bob", "scores": 80 }
{ "_id": 2, "name": "Bob", "scores": 85 }


Additional Options
Preserving Empty Arrays: By default, if the array is empty or doesn’t exist, $unwind will exclude the document. You can use preserveNullAndEmptyArrays: true to keep those documents.


{
  $unwind: {
    path: "$arrayField",
    preserveNullAndEmptyArrays: true
  }
}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
# what is $addfiled in mongodb  ?

The $addFields operator in MongoDB is used to add new fields to documents within an aggregation pipeline. It can either add new fields or modify existing ones based on specified expressions.

Syntax::- 

{
  $addFields: {
    "newField": <expression>,
    "existingField": <newExpression>
  }
}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------


-----------------------------------------------------------------------------------------------------------------------------------------------------------------------


-----------------------------------------------------------------------------------------------------------------------------------------------------------------------


-----------------------------------------------------------------------------------------------------------------------------------------------------------------------


-----------------------------------------------------------------------------------------------------------------------------------------------------------------------


-----------------------------------------------------------------------------------------------------------------------------------------------------------------------


-----------------------------------------------------------------------------------------------------------------------------------------------------------------------


-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------


-----------------------------------------------------------------------------------------------------------------------------------------------------------------------


-----------------------------------------------------------------------------------------------------------------------------------------------------------------------


-----------------------------------------------------------------------------------------------------------------------------------------------------------------------



-----------------------------------------------------------------------------------------------------------------------------------------------------------------------


-----------------------------------------------------------------------------------------------------------------------------------------------------------------------


-----------------------------------------------------------------------------------------------------------------------------------------------------------------------


-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------


-----------------------------------------------------------------------------------------------------------------------------------------------------------------------


-----------------------------------------------------------------------------------------------------------------------------------------------------------------------


-----------------------------------------------------------------------------------------------------------------------------------------------------------------------


