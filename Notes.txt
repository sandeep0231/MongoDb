-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
#) show dbs :- to show the database
#) use mydatabase :-  command to switch to a specific database or create( if db name is not exist in mongodb.)
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
#) Advantages of MongoDB over RDBMS :- 

Schema less − MongoDB is a document database in which one collection holds different documents. Number of fields, content and size of the document can differ from one document to another.

Structure of a single object is clear.

No complex joins.

Deep query-ability. MongoDB supports dynamic queries on documents using a document-based query language that's nearly as powerful as SQL.

Tuning.

Ease of scale-out − MongoDB is easy to scale.

Conversion/mapping of application objects to database objects not needed.

Uses internal memory for storing the (windowed) working set, enabling faster access of data.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
#)  Why Use MongoDB? :- 
 Document Oriented Storage − Data is stored in the form of JSON style documents.

Index on any attribute

Replication and high availability

Auto-Sharding

Rich queries

Fast in-place updates

Professional support by MongoDB
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
#)   Where to Use MongoDB? :- 
Big Data
Content Management and Delivery
Mobile and Social Infrastructure
User Data Management
Data Hub
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
#)  The dropDatabase() Method :- MongoDB db.dropDatabase() command is used to drop a existing database.
>>>db.dropDatabase()
This will delete the selected database. If you have not selected any database, then it will delete default 'test' database.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
#) The createCollection() Method :- MongoDB db.createCollection(name, options) is used to create collection.
Syntax:-
>>>db.createCollection(name, options)
In the command, name is name of collection to be created. Options is a document and is used to specify configuration of collection.

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
#) The drop() Method :- MongoDB's db.collection.drop() is used to drop a collection from the database.
Syntax :- 
>>>db.COLLECTION_NAME.drop()
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
#) DATATYPE in mongoDB :- MongoDB supports many datatypes. Some of them are −

String − This is the most commonly used datatype to store the data. String in MongoDB must be UTF-8 valid.

Integer − This type is used to store a numerical value. Integer can be 32 bit or 64 bit depending upon your server.

Boolean − This type is used to store a boolean (true/ false) value.

Double − This type is used to store floating point values.

Min/ Max keys − This type is used to compare a value against the lowest and highest BSON elements.

Arrays − This type is used to store arrays or list or multiple values into one key.

Timestamp − ctimestamp. This can be handy for recording when a document has been modified or added.

Object − This datatype is used for embedded documents.

Null − This type is used to store a Null value.

Symbol − This datatype is used identically to a string; however, it's generally reserved for languages that use a specific symbol type.

Date − This datatype is used to store the current date or time in UNIX time format. You can specify your own date time by creating object of Date and passing day, month, year into it.

Object ID − This datatype is used to store the document’s ID.

Binary data − This datatype is used to store binary data.

Code − This datatype is used to store JavaScript code into the document.

Regular expression − This datatype is used to store regular expression.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
#) The insert() Method :- To insert data into MongoDB collection, you need to use MongoDB's insert() or save() method.
Definition: The insert method is used to insert one or more documents into a collection.
Syntax: >>>db.collection.insert(documents)
Usage:
Accepts an array of documents or a single document.
If an array is provided, all documents are inserted in a single operation.
Returns an acknowledgment of the write operation, including the number of documents inserted and their _id values.
Behavior:
If documents with conflicting _id values are inserted, the operation will fail for all conflicting documents.
Allows for bulk insertion of multiple documents efficiently.
EX: -
db.users.insert([
  { name: "Alice", age: 30 },
  { name: "Bob", age: 25 }
]);

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
#) The insertOne() method :-   The insertOne method is used to insert a single document into a collection.
Syntax: - >>>db.collection.insertOne(document)
Usage:
Accepts a single document as an argument.
Inserts exactly one document into the collection.
Returns an acknowledgment of the write operation, including the _id of the inserted document.
Behavior:
If the document already contains an _id field, MongoDB will use that _id. Otherwise, MongoDB will generate a new unique _id.
Useful for inserting individual documents when you only need to insert one document at a time

EX: - db.users.insertOne({ name: "Charlie", age: 35 });

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
#) The insertMany() method :- Definition: The insertMany method is used to insert multiple documents into a collection.
Syntax: -  >>>db.collection.insertMany(documents, options)

Usage:
Accepts an array of documents as an argument.
Inserts multiple documents into the collection in a single operation.
Returns an acknowledgment object with details about the write operation, including the _id values of the inserted documents.

EX :-
db.users.insertMany([
  { name: "Alice", age: 30 },
  { name: "Bob", age: 25 }
]);

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
#) The find() Method :-  To query data from MongoDB collection, you need to use MongoDB's find() method.
>>>db.COLLECTION_NAME.find()
find() method will display all the documents in a non-structured way.
EX :-
// Find all documents where age is greater than 25
const cursor = db.users.find({ age: { $gt: 25 } });

// Iterate over the cursor and print each document
cursor.forEach(doc => {
    console.log(doc);
});

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
#) The findOne() method :-  Apart from the find() method, there is findOne() method, that returns only one document.
>>>db.COLLECTIONNAME.findOne()
Definition: The findOne() method is used to query a single document from a collection that matches the specified criteria.
EX: -
// Find the first document where name is "Alice"
const document = db.users.findOne({ name: "Alice" });
console.log(document);

When to Use Each
Use find() when you need to retrieve multiple documents that match specific criteria.
Use findOne() when you only need to retrieve one document that matches specific criteria or to check if a document exists

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
#) MongoDB Update() Method :- The update() method updates the values in the existing document.

>>>db.COLLECTION_NAME.update(SELECTION_CRITERIA, UPDATED_DATA)

 The updateOne() method updates a single document that matches the specified filter in a collection.
Syntax: db.collection.updateOne(filter, update, options)
Usage:
Accepts a filter object to specify which document(s) to update.
Accepts an update object that defines the modifications to apply to the matched document.
Returns an acknowledgment object with details about the update operation.

Behavior:
Updates only the first document that matches the filter.
If no document matches the filter, no action is taken.
Supports options like upsert to insert a new document if no match is found ({ upsert: true }).

EX :-
// Update the document where name is "Alice"
const result = await db.users.updateOne(
    { name: "Alice" },
    { $set: { age: 31 } }
);
console.log(result.modifiedCount); // Number of documents modified (should be 1)

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
#) updateMany() :- 
Definition: The updateMany() method updates all documents that match the specified filter in a collection.
Syntax: >>>db.collection.updateMany(filter, update, options)
Usage:
Accepts a filter object to specify which document(s) to update.
Accepts an update object that defines the modifications to apply to the matched documents.
Returns an acknowledgment object with details about the update operation.
Behavior:
Updates all documents that match the filter.
If no documents match the filter, no action is taken.
Supports options like upsert to insert new documents if no matches are found ({ upsert: true }).

EX :- 
// Update all documents where age is greater than 30
const result = await db.users.updateMany(
    { age: { $gt: 30 } },
    { $set: { status: "inactive" } }
);
console.log(result.modifiedCount); // Number of documents modified

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
#) MongoDB findOneAndUpdate() method :- In MongoDB, findOneAndUpdate() is a method that atomically finds a document in a collection, updates it, and returns either the original document before modification or the updated document depending on the options specified. This method is particularly useful for scenarios where you need to update a single document and optionally retrieve the document as it was before the update or after the update.

Syntax:
The basic syntax for findOneAndUpdate() in MongoDB is as follows:
>>>db.collection.findOneAndUpdate(filter, update, options)

EX :- 
// Update the document where name is "Alice", and increment her age by 1
const result = await db.users.findOneAndUpdate(
    { name: "Alice" },
    { $inc: { age: 1 } }
);
console.log(result.value); // Updated document


// Find the document where name is "Bob" and update his age or create a new document if not found
const result = await db.users.findOneAndUpdate(
    { name: "Bob" },
    { $set: { age: 35 } },
    { upsert: true, returnOriginal: false }
);
console.log(result.value); // Updated or newly inserted document

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
#) How do you perform a basic CRUD operation in MongoDB?

1. Create
To insert documents into a collection, you can use insertOne or insertMany.

// Insert one document
db.collectionName.insertOne({
    name: "Alice",
    age: 30,
    city: "New York"
});

// Insert multiple documents
db.collectionName.insertMany([
    { name: "Bob", age: 25, city: "Los Angeles" },
    { name: "Charlie", age: 35, city: "Chicago" }
]);

2. Read
To query documents, you can use find or findOne.

// Find all documents
db.collectionName.find({});

// Find a single document
db.collectionName.findOne({ name: "Alice" });

// Find with specific criteria
db.collectionName.find({ age: { $gt: 30 } }); // Find documents where age is greater than 30


3. Update
To modify existing documents, use updateOne, updateMany, or replaceOne.

// Update one document
db.collectionName.updateOne(
    { name: "Alice" }, // Filter
    { $set: { age: 31 } } // Update
);

// Update multiple documents
db.collectionName.updateMany(
    { city: "New York" },
    { $set: { city: "NYC" } }
);

// Replace a document
db.collectionName.replaceOne(
    { name: "Bob" },
    { name: "Bobby", age: 26, city: "Los Angeles" }
);

4. Delete
To remove documents, use deleteOne or deleteMany.

// Delete one document
db.collectionName.deleteOne({ name: "Alice" });

// Delete multiple documents
db.collectionName.deleteMany({ city: "Los Angeles" });

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
First  of all, basic difference between findOne() and find():

findOne() - if query matches, first document is returned, otherwise null.

find() - no matter the number of documents matched, a cursor is returned, never null.

So when put in an if condition, findOne() can convert to false when it doesn't match any document. As find() returns a cursor object and never returns null, will convert to true when put in an if condition.


-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
#) What are indexes in MongoDB, and why are they important?

What are Indexes in MongoDB?
Indexes in MongoDB are special data structures that improve the speed of data retrieval operations on a database collection. They work similarly to indexes in books, allowing the database to find data without scanning every document.

Why are Indexes Important?

1)Improved Query Performance:
Indexes significantly speed up the performance of read operations by reducing the number of documents MongoDB needs to scan. Without indexes, MongoDB performs a collection scan, examining each document.

2) Efficient Sorting:
Indexes can improve the efficiency of sort operations, allowing the database to return results in a sorted order more quickly.

3) Support for Unique Constraints:
Indexes can enforce uniqueness on specific fields, ensuring that no two documents can have the same value for those fields.

4)Optimized Queries:
MongoDB's query planner uses indexes to determine the most efficient way to execute a query, resulting in faster query execution.


Types of Indexes in MongoDB :::-----

1) Single Field Index:-
Indexes on a single field of a document.
Example: db.collection.createIndex({ fieldName: 1 }) (1 for ascending, -1 for descending).


2) Compound Index:-
Indexes on multiple fields. Useful for queries that filter or sort on multiple fields.
Example: db.collection.createIndex({ field1: 1, field2: -1 }).

3) Multikey Index:-
Indexes on array fields, allowing indexing of each element in an array.
Example: db.collection.createIndex({ arrayField: 1 }).

4) Text Index:-
Enables text search on string fields, useful for search functionality.
Example: db.collection.createIndex({ fieldName: "text" }).

5) Geospatial Index:-
Supports queries that require location-based data, such as searching by geographic coordinates.
Example: db.collection.createIndex({ location: "2dsphere" }).

6) Hashed Index:-
Useful for sharding and allows for efficient equality checks on fields.
Example: db.collection.createIndex({ fieldName: "hashed" }).



Monitoring and Managing Indexes:::------

View Indexes:-
db.collectionName.getIndexes();

Drop Index:-
db.collectionName.dropIndex("indexName");

Index Usage Statistics:-
Use the explain() method to understand how indexes are being utilized in queries.
db.collectionName.find({ fieldName: "value" }).explain("executionStats");


-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
##)  Geospatial Queries : --  MongoDB's geospatial queries allow for complex spatial searches and analysis. By leveraging geospatial indexes and operators, you can efficiently query and manipulate geographic data, making it a powerful tool for applications that require location-based features.

MongoDB provides powerful features for storing and querying geospatial data. You can use these features to perform queries based on geographic locations, such as
finding points within a certain distance or searching for documents based on their coordinates.


-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------


-----------------------------------------------------------------------------------------------------------------------------------------------------------------------


-----------------------------------------------------------------------------------------------------------------------------------------------------------------------



-----------------------------------------------------------------------------------------------------------------------------------------------------------------------



-----------------------------------------------------------------------------------------------------------------------------------------------------------------------



-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

         ############################## *********MONGO DB AGGREGATION AND PIPELINE********* ##############################
         ############################## *********MONGO DB AGGREGATION AND PIPELINE********* ##############################
         ############################## *********MONGO DB AGGREGATION AND PIPELINE********* ##############################


-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
#) Here’s a list of common comparison operators you can use in MongoDB queries::---

1) Equality Operators::-
                    $eq: Equal to
                    $ne: Not equal to

2) In/Not In Operators::-
                  $in: In a specified array
                  $nin: Not in a specified array


3) Comparison Operators::-

                  $gt: Greater than
                  $gte: Greater than or equal to
                  $lt: Less than
                  $lte: Less than or equal to


4) Logical Operators::-

                $and: Logical AND
                $or: Logical OR
                $not: Logical NOT
                $nor: Logical NOR

5)Additional Operators::-

                $exists: Checks for the existence of a field
                $type: Checks the BSON type of a field
------------------------------------------------------------------------------------

## EXAMPLE OF USE ALL OPRATORS ::-

// Equal to
db.collection.find({ age: { $eq: 30 } });

// Not equal to
db.collection.find({ age: { $ne: 30 } });

// In
db.collection.find({ status: { $in: ["active", "pending"] } });

// Not in
db.collection.find({ status: { $nin: ["inactive", "suspended"] } });

// Greater than
db.collection.find({ age: { $gt: 30 } });

// Greater than or equal to
db.collection.find({ age: { $gte: 30 } });

// Less than
db.collection.find({ age: { $lt: 30 } });

// Less than or equal to
db.collection.find({ age: { $lte: 30 } });


-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

#) what is $unwind in mongodb ?

The $unwind operator in MongoDB is used to deconstruct an array field from the input documents, creating a separate document for each element of the array. This is particularly useful in aggregation pipelines when you want to work with each element of an array individually.

How $unwind Works
When you apply $unwind to an array field:

Each element of the array generates a new document.
Other fields in the original document are repeated for each new document.
Syntax ::-
{
  $unwind: "$arrayField"
}



Example
Consider a collection named students with the following documents:

{ "_id": 1, "name": "Alice", "scores": [85, 90, 95] }
{ "_id": 2, "name": "Bob", "scores": [80, 85] }
Using $unwind on the scores array:


db.students.aggregate([
  { $unwind: "$scores" }
])



The result will be:
{ "_id": 1, "name": "Alice", "scores": 85 }
{ "_id": 1, "name": "Alice", "scores": 90 }
{ "_id": 1, "name": "Alice", "scores": 95 }
{ "_id": 2, "name": "Bob", "scores": 80 }
{ "_id": 2, "name": "Bob", "scores": 85 }


Additional Options
Preserving Empty Arrays: By default, if the array is empty or doesn’t exist, $unwind will exclude the document. You can use preserveNullAndEmptyArrays: true to keep those documents.


{
  $unwind: {
    path: "$arrayField",
    preserveNullAndEmptyArrays: true
  }
}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
# what is $addfiled in mongodb  ?

The $addFields operator in MongoDB is used to add new fields to documents within an aggregation pipeline. It can either add new fields or modify existing ones based on specified expressions.

Syntax::- 

{
  $addFields: {
    "newField": <expression>,
    "existingField": <newExpression>
  }
}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
#) what is $all in mongodb ?


The $all operator in MongoDB is used to match documents that contain an array field with all the specified elements. This operator is useful when you want to ensure
that an array contains multiple specific values.

Example Usage
Suppose you have a collection of documents representing employees, and each document has a skills array:

{
  "_id": 1,
  "name": "Alice",
  "skills": ["JavaScript", "MongoDB", "Node.js"]
}
{
  "_id": 2,
  "name": "Bob",
  "skills": ["Python", "Django"]
}
{
  "_id": 3,
  "name": "Charlie",
  "skills": ["JavaScript", "Node.js"]
}


Query with $all
If you want to find employees who have both "JavaScript" and "Node.js" in their skills array, you would use $all like this:
db.employees.find({
  skills: { $all: ["JavaScript", "Node.js"] }
});

Result
This query would return:
{
  "_id": 1,
  "name": "Alice",
  "skills": ["JavaScript", "MongoDB", "Node.js"]
}
{
  "_id": 3,
  "name": "Charlie",
  "skills": ["JavaScript", "Node.js"]
}


Important Notes:::-
The order of elements in the array does not matter when using $all.
The $all operator can only be used with arrays.
It can be combined with other operators for more complex queries.


-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
##) What is $lookup in mongodb ?

Certainly! The $lookup stage in MongoDB is used for performing a left outer join between two collections. This allows you to combine documents from different collections based on a specified field.

Basic Syntax::-

{
  $lookup: {
    from: "otherCollection", // The collection to join
    localField: "fieldFromInputCollection", // Field from the input collection
    foreignField: "fieldFromOtherCollection", // Field from the other collection
    as: "outputArrayField" // Name of the new array field to add to the output documents
  }
}


Example Scenario
Let’s consider two collections: employees and departments.


employees Collection:-
[
  { "_id": 1, "name": "Alice", "departmentId": 101 },
  { "_id": 2, "name": "Bob", "departmentId": 102 },
  { "_id": 3, "name": "Charlie", "departmentId": 101 }
]

departments Collection:-
[
  { "_id": 101, "deptName": "HR" },
  { "_id": 102, "deptName": "Engineering" },
  { "_id": 103, "deptName": "Marketing" }
]


Using $lookup to Join Collections:---
To join these two collections and get the department names along with the employee documents, you can use the $lookup operator.

Aggregation Query::-
db.employees.aggregate([
  {
    $lookup: {
      from: "departments",             // The collection to join
      localField: "departmentId",      // Field from employees
      foreignField: "_id",             // Field from departments
      as: "departmentDetails"          // Output field name
    }
  }
]);

Explanation of the Output
Each employee document now includes an additional field, departmentDetails, which is an array containing the corresponding department document.
If an employee's department does not exist in the departments collection, the departmentDetails array will be empty.

:::Using $lookup with Unwinding:::
You can further process the result using $unwind if you want to flatten the array:

db.employees.aggregate([
  {
    $lookup: {
      from: "departments",
      localField: "departmentId",
      foreignField: "_id",
      as: "departmentDetails"
    }
  },
  {
    $unwind: "$departmentDetails" // Flatten the array
  }
]);

NOTE:- If we want to fetch only specific fileds in $lookup output data we can use $project ::-

db.employees.aggregate([
  {
    $lookup: {
      from: "departments",
      localField: "departmentId",
      foreignField: "_id",
      as: "departmentDetails"
    }
  },
  {
    $unwind: "$departmentDetails" // Flatten the array
  },
  {
    $project: {
      _id: 1, // Include the employee ID
      name: 1, // Include the employee name
      "departmentDetails.deptName": 1 // Include only the department name
      // Add more fields as needed
    }
  }
]);


-----------------------------------------------------------------------------------------------------------------------------------------------------------------------


-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

                                  ################******* Normalization vs. Denormalization *******###############
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
Normalization:

Definition: The process of organizing data to reduce redundancy and improve data integrity. It typically involves splitting data into multiple collections and using references to connect them.

Pros:
Reduces data duplication.
Ensures consistency and integrity across the database.

Cons:
May lead to complex queries involving multiple collections (joins).
Can impact read performance due to additional lookups.


Denormalization:
Definition: The process of combining data from multiple collections into a single collection to improve read performance. This often leads to data duplication.

Pros:
Simplifies data retrieval by reducing the need for multiple queries or joins.
Enhances read performance, especially in read-heavy applications.

Cons:
Increases data redundancy, which can lead to inconsistencies.
Updates can be more complex since the same data may exist in multiple places.



Certainly! Let’s discuss normalization vs. denormalization and embedding vs. referencing in MongoDB.

Normalization vs. Denormalization
Normalization:

Definition: The process of organizing data to reduce redundancy and improve data integrity. It typically involves splitting data into multiple collections and using references to connect them.
Pros:
Reduces data duplication.
Ensures consistency and integrity across the database.
Cons:
May lead to complex queries involving multiple collections (joins).
Can impact read performance due to additional lookups.


Denormalization:
Definition: The process of combining data from multiple collections into a single collection to improve read performance. This often leads to data duplication.
Pros:
Simplifies data retrieval by reducing the need for multiple queries or joins.
Enhances read performance, especially in read-heavy applications.
Cons:
Increases data redundancy, which can lead to inconsistencies.
Updates can be more complex since the same data may exist in multiple places.


..........................................................................................................................

Embedding vs. Referencing

Embedding:
Definition: Storing related data within a single document as a nested object or array. This is useful for data that is frequently accessed together.
When to Use:
When one-to-few relationships exist (e.g., user profiles with addresses).
When data is mostly read and rarely updated.
Pros:
Reduces the need for joins and improves read performance.
Keeps related data together, which can be advantageous for atomic operations.
Cons:
Can lead to document size limitations if too much data is embedded.
Difficult to manage large arrays or deeply nested structures.


Summary
Normalization vs. Denormalization:

Normalization reduces redundancy, while denormalization enhances read performance at the cost of data duplication.
Embedding vs. Referencing:

Embedding is useful for closely related data and improves read performance, while referencing is better for managing relationships and large datasets but can complicate queries.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------


-----------------------------------------------------------------------------------------------------------------------------------------------------------------------


-----------------------------------------------------------------------------------------------------------------------------------------------------------------------


-----------------------------------------------------------------------------------------------------------------------------------------------------------------------


-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------


-----------------------------------------------------------------------------------------------------------------------------------------------------------------------


-----------------------------------------------------------------------------------------------------------------------------------------------------------------------




